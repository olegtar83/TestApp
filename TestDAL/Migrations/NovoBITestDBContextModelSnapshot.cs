// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestDAL.Models;

namespace TestDAL.Migrations
{
    [DbContext(typeof(NovoBITestDBContext))]
    partial class NovoBITestDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TestDAL.Models.BookOrders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderId");

                    b.ToTable("BookOrders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            OrderId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 3,
                            OrderId = 1
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            OrderId = 2
                        },
                        new
                        {
                            Id = 4,
                            BookId = 4,
                            OrderId = 3
                        },
                        new
                        {
                            Id = 5,
                            BookId = 5,
                            OrderId = 2
                        });
                });

            modelBuilder.Entity("TestDAL.Models.BookTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BookTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("BookTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookTypeName = "Software"
                        },
                        new
                        {
                            Id = 2,
                            BookTypeName = "Cooking"
                        },
                        new
                        {
                            Id = 3,
                            BookTypeName = "Esoterica"
                        });
                });

            modelBuilder.Entity("TestDAL.Models.Books", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("BookTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ExtraData")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("Id");

                    b.HasIndex("BookTypeId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Barcode = "00000000-0000-0000-0000-000000000000",
                            BookTypeId = 1,
                            ExtraData = "{\"Text\":\"Programming language\",\"Value\":\"C#\"}",
                            Name = "Domain-Driven Design",
                            PageCount = 123,
                            Price = 12m
                        },
                        new
                        {
                            Id = 2,
                            Barcode = "00000000-0000-0000-0000-000000000000",
                            BookTypeId = 1,
                            ExtraData = "{\"Text\":\"Programming language\",\"Value\":\"Java\"}",
                            Name = "Scrum Deveploment",
                            PageCount = 343,
                            Price = 1442m
                        },
                        new
                        {
                            Id = 3,
                            Barcode = "00000000-0000-0000-0000-000000000000",
                            BookTypeId = 1,
                            ExtraData = "{\"Text\":\"Programming language\",\"Value\":\"Haskell\"}",
                            Name = "Software Management",
                            PageCount = 343,
                            Price = 1442m
                        },
                        new
                        {
                            Id = 4,
                            Barcode = "00000000-0000-0000-0000-000000000000",
                            BookTypeId = 2,
                            ExtraData = "{\"Text\":\"Basic ingridient\",\"Value\":\"Applles\"}",
                            Name = "Receipts of pie",
                            PageCount = 545,
                            Price = 6545m
                        },
                        new
                        {
                            Id = 5,
                            Barcode = "00000000-0000-0000-0000-000000000000",
                            BookTypeId = 3,
                            ExtraData = "{\"Text\":\"Age Rectriction\",\"Value\":\"18\"}",
                            Name = "Greate misteries",
                            PageCount = 545,
                            Price = 6545m
                        },
                        new
                        {
                            Id = 6,
                            Barcode = "00000000-0000-0000-0000-000000000000",
                            BookTypeId = 3,
                            ExtraData = "{\"Text\":\"\",\"Value\":\"\"}",
                            Name = "History of esoterica",
                            PageCount = 545,
                            Price = 6545m
                        });
                });

            modelBuilder.Entity("TestDAL.Models.DiscContents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiscContentName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("DiscContents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DiscContentName = "Music"
                        },
                        new
                        {
                            Id = 2,
                            DiscContentName = "Video"
                        },
                        new
                        {
                            Id = 3,
                            DiscContentName = "Software"
                        });
                });

            modelBuilder.Entity("TestDAL.Models.DiscOrders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiscId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscId");

                    b.HasIndex("OrderId");

                    b.ToTable("DiscOrders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DiscId = 2,
                            OrderId = 1
                        },
                        new
                        {
                            Id = 2,
                            DiscId = 3,
                            OrderId = 2
                        },
                        new
                        {
                            Id = 3,
                            DiscId = 4,
                            OrderId = 3
                        },
                        new
                        {
                            Id = 4,
                            DiscId = 3,
                            OrderId = 2
                        },
                        new
                        {
                            Id = 5,
                            DiscId = 5,
                            OrderId = 1
                        });
                });

            modelBuilder.Entity("TestDAL.Models.DiscTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiscTypeName")
                        .HasColumnType("nchar(3)")
                        .IsFixedLength(true)
                        .HasMaxLength(3);

                    b.HasKey("Id");

                    b.ToTable("DiscTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DiscTypeName = "CD"
                        },
                        new
                        {
                            Id = 2,
                            DiscTypeName = "DVD"
                        });
                });

            modelBuilder.Entity("TestDAL.Models.Discs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiscContentId")
                        .HasColumnType("int");

                    b.Property<int>("DiscTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("DiscContentId");

                    b.HasIndex("DiscTypeId");

                    b.ToTable("Discs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DiscContentId = 1,
                            DiscTypeId = 1,
                            Name = "Marlyn Manson"
                        },
                        new
                        {
                            Id = 2,
                            DiscContentId = 1,
                            DiscTypeId = 2,
                            Name = "RHCP 1996"
                        },
                        new
                        {
                            Id = 3,
                            DiscContentId = 1,
                            DiscTypeId = 3,
                            Name = "OOP Principles"
                        },
                        new
                        {
                            Id = 4,
                            DiscContentId = 1,
                            DiscTypeId = 2,
                            Name = "ACDC"
                        },
                        new
                        {
                            Id = 5,
                            DiscContentId = 2,
                            DiscTypeId = 2,
                            Name = "National Geografic"
                        },
                        new
                        {
                            Id = 6,
                            DiscContentId = 3,
                            DiscTypeId = 2,
                            Name = "CQRS Principles"
                        });
                });

            modelBuilder.Entity("TestDAL.Models.OrderStatuses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderStatus = "New"
                        },
                        new
                        {
                            Id = 2,
                            OrderStatus = "Pending"
                        },
                        new
                        {
                            Id = 3,
                            OrderStatus = "Executing"
                        },
                        new
                        {
                            Id = 4,
                            OrderStatus = "Done"
                        });
                });

            modelBuilder.Entity("TestDAL.Models.Orders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientEmail = "ooe@error.com",
                            CreateDate = new DateTime(2022, 10, 6, 19, 10, 14, 262, DateTimeKind.Local).AddTicks(5125),
                            OrderStatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClientEmail = "oo1@bugs.com",
                            CreateDate = new DateTime(2022, 10, 6, 19, 10, 14, 263, DateTimeKind.Local).AddTicks(6756),
                            OrderStatusId = 2
                        },
                        new
                        {
                            Id = 3,
                            ClientEmail = "memory@leaks.com",
                            CreateDate = new DateTime(2022, 10, 6, 19, 10, 14, 263, DateTimeKind.Local).AddTicks(6792),
                            OrderStatusId = 3
                        });
                });

            modelBuilder.Entity("TestDAL.Models.BookOrders", b =>
                {
                    b.HasOne("TestDAL.Models.Books", "Book")
                        .WithMany("BookOrders")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_BookOrders_Books")
                        .IsRequired();

                    b.HasOne("TestDAL.Models.Orders", "Order")
                        .WithMany("BookOrders")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_BookOrders_Orders")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestDAL.Models.Books", b =>
                {
                    b.HasOne("TestDAL.Models.BookTypes", "BookType")
                        .WithMany("Books")
                        .HasForeignKey("BookTypeId")
                        .HasConstraintName("FK_Books_BookTypes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestDAL.Models.DiscOrders", b =>
                {
                    b.HasOne("TestDAL.Models.Discs", "Disc")
                        .WithMany("DiscOrders")
                        .HasForeignKey("DiscId")
                        .HasConstraintName("FK_DiscOrders_Discs")
                        .IsRequired();

                    b.HasOne("TestDAL.Models.Orders", "Order")
                        .WithMany("DiscOrders")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_DiscOrders_Orders")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestDAL.Models.Discs", b =>
                {
                    b.HasOne("TestDAL.Models.DiscContents", "DiscContent")
                        .WithMany("Discs")
                        .HasForeignKey("DiscContentId")
                        .HasConstraintName("FK_Discs_DiscContents")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestDAL.Models.DiscTypes", "DiscType")
                        .WithMany("Discs")
                        .HasForeignKey("DiscTypeId")
                        .HasConstraintName("FK_Discs_DiscTypes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestDAL.Models.Orders", b =>
                {
                    b.HasOne("TestDAL.Models.OrderStatuses", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .HasConstraintName("FK_Orders_OrdersStatuses")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
